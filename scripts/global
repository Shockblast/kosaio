check_required_vars() {
	local vars_to_check=(
		"DREAMCAST_SDK_EXTRAS"
		"DREAMCAST_SDK"
		"PROJECTS_DIR"
		"DREAMCAST_BIN_PATH"
		"KOSAIO_DIR"
		"KOSAIO_SCRIPTS"
		"KOSAIO_BASIC_PROJECT"
		"KOSAIO_VSCODE_SETTINGS" # This one needs an additional check
	)

	for var_name in "${vars_to_check[@]}"; do
		if [[ -z "${!var_name}" ]]; then
			echo "Error: ${var_name} is not set. Please set it appropriately." >&2
			exit 1
		fi

		# Additional check for KOSAIO_VSCODE_SETTINGS: must be a directory
		if [[ "${var_name}" == "KOSAIO_VSCODE_SETTINGS" && ! -d "${!var_name}" ]]; then
			echo "Error: KOSAIO_VSCODE_SETTINGS is not a valid directory." >&2
			exit 1
		fi

		#echo -e "${var_name} - OK \n"
	done
}

# Run the check when the script is sourced.
check_required_vars

# Some Functions

function kosaio-echo() {
	echo -e "======================================== \n"
	echo -e "$@"
	echo -e "======================================== \n"
}

# Checks if one or more directories exist and exits with an error if any don't.
# Usage: kosaio-check-folder-exist <path_to_folder_1> [<path_to_folder_2> ...]
function kosaio-check-folder-exist() {
	if [ "$#" -eq 0 ]; then
		echo "Error: kosaio-check-folder-exist requires at least one directory path." >&2
		exit 1
	fi

	for folder_path in "$@"; do
		if [ ! -d "${folder_path}" ]; then
			echo "Error: Required directory not found: ${folder_path}" >&2
			exit 1
		fi
	done
}

# Checks if a file exists and exits with an error if it doesn't.
# Can check for one or more files.
# This is useful for verifying build artifacts before attempting to copy them.
# Usage: kosaio-check-file-exist <path_to_file_1> [<path_to_file_2> ...]
function kosaio-check-file-exist() {
	if [ "$#" -eq 0 ]; then
		echo "Error: kosaio-check-file-exist requires at least one directory path." >&2
		exit 1
	fi

	for file_path in "$@"; do
		if [ ! -f "${file_path}" ]; then
			echo "Error: Required file not found: ${file_path}" >&2
			echo "The build process may have failed." >&2
			exit 1
		fi
	done
}

# Updates a git repository by fetching and pulling if behind remote.
# Usage: kosaio-git-common-update <path_to_repo>
function kosaio-git-common-update() {
	local repo_dir="$1"

	if [ -z "${repo_dir}" ]; then
		echo "Usage: kosaio-git-common-update <path_to_repo>" >&2
		return 1
	fi

	kosaio-check-folder-exist "${repo_dir}"

	(
		cd "${repo_dir}" || exit
		echo "Checking for updates in $(basename "${repo_dir}")..."
		git fetch origin

		# Check if an upstream branch is configured to avoid errors
		if ! git rev-parse --abbrev-ref @'{u}' >/dev/null 2>&1; then
			echo "No upstream branch is configured for the current branch. Skipping pull."
			return
		fi

		if [ "$(git rev-parse HEAD)" != "$(git rev-parse '@{u}')" ]; then
			echo "Local branch is behind remote. Pulling changes..."
			git pull
		else
			echo "Local branch is up-to-date with remote."
		fi
	)
}
