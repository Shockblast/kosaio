#!/bin/bash
set -e

# Private Functions

function kosaio_echo() {
	echo -e "======================================== \n"
	echo -e "$@"
	echo -e "======================================== \n"
}

function kosaio_set_folder_permission() {
	if [ "$#" -eq 0 ]; then
		echo "Error: kosaio_set_folder_permission requires at least one path." >&2
		exit 1
	fi

	for path in "$@"; do
		if [ ! -e "${path}" ]; then
			echo "Error: Path not found: ${path}" >&2
			exit 1
		else
			chmod -R 755 ${path}
			chown -R root:root "${path}"
			echo "Permissions set for ${path}"
		fi
	done
}

function kosaio_git_common_update() {
	local repo_dir="$1"

	if [[ -z "${repo_dir}" ]]; then
		echo "Usage: kosaio_git_common_update <path_to_repo>" >&2
		return 1
	fi

	if [[ -d "${repo_dir}" ]]; then
		cd "${repo_dir}" || return 1
		echo "Checking for updates in $(basename "${repo_dir}")..."

		# Store the original HEAD to show the log of new commits later
		local old_head=$(git rev-parse HEAD)

		# Fetch the latest changes from the remote without merging them
		git fetch origin

		# Check if an upstream branch is configured to avoid errors
		local upstream
		upstream=$(git rev-parse --abbrev-ref --symbolic-full-name @{u} 2>/dev/null)
		if [[ -z "$upstream" ]]; then
			echo "No upstream branch is configured for the current branch. Skipping pull."
			return 0
		fi

		local local_rev=$(git rev-parse @)
		local remote_rev=$(git rev-parse @{u})
		local base_rev=$(git merge-base @ @{u})

		if [[ "${local_rev}" == "${remote_rev}" ]]; then
			echo "Local branch is up-to-date with remote."
		elif [[ "${local_rev}" == "${base_rev}" ]]; then
			git reset --hard
			echo "Local branch is behind '${upstream}'. Pulling changes..."
			git pull
			echo "New changes:"
			git log --pretty=format:'%h - %s (%cr)' "${old_head}..HEAD"
		elif [[ "${remote_rev}" == "${base_rev}" ]]; then
			echo "Local branch is ahead of '${upstream}'. Nothing to pull."
		else
			git reset --hard
			echo "Branches have diverged. Pulling changes..."
			git pull
			echo "New changes:"
			git log --pretty=format:'%h - %s (%cr)' "${old_head}..HEAD"
		fi
	fi
}

function kosaio_require_packages() {
	local missing=()
	for pkg in "$@"; do
		if ! dpkg -s "$pkg" &>/dev/null; then
			missing+=("$pkg")
		fi
	done

	if [[ ${#missing[@]} -gt 0 ]]; then
		echo "Installing missing packages: ${missing[*]}"
		apt-get install -y "${missing[@]}"
	fi
}

# Check config file
if [ ! -f "${KOSAIO_CONFIG}" ]; then
	kosaio_echo "Kosaio config file doest exist, we create it."
	touch "${KOSAIO_CONFIG}"

	if [ -f "${KOSAIO_CONFIG}" ]; then
		if [ -d "${KOSAIO_DIR}/scripts/sdk/" ]; then
			for tool_script in "${KOSAIO_DIR}/scripts/sdk/"*.sh; do
				tool_name=$(basename "${tool_script}" .sh)
				crudini --set "${KOSAIO_CONFIG}" dreamcast_sdk "${tool_name}" 0
			done
		else
			kosaio_echo "Warning: Folder ${KOSAIO_DIR}/scripts/sdk/ doest exist, check kosaio installation."
		fi
	else
		kosaio_echo "Cant create ${KOSAIO_CONFIG} file doest exist, plase check permissions."
	fi
else
	# Check if exist new sdk tools and add on kosaio.ini
	if [ -d "${KOSAIO_DIR}/scripts/sdk/" ]; then
		for tool_script in "${KOSAIO_DIR}/scripts/sdk/"*.sh; do
			tool_name=$(basename "${tool_script}" .sh)
			if ! crudini --get "${KOSAIO_CONFIG}" dreamcast_sdk "${tool_name}" >/dev/null 2>&1; then
				crudini --set "${KOSAIO_CONFIG}" dreamcast_sdk "${tool_name}" 0
			fi
		done
	else
		kosaio_echo "Warning: Folder ${KOSAIO_DIR}/scripts/sdk/ doest exist, check kosaio installation."
	fi
fi

# Public functions

function show_usage() {
	kosaio_echo "Usage: kosaio <tool> <action>"
	echo "A master script to manage various Dreamcast SDK tools."
	echo "It acts as a dispatcher, calling the install, uninstall, or update functions from the individual tool management scripts."
	echo
	echo "Available sdk tools:"

	if [ -d "${KOSAIO_DIR}/scripts/sdk/" ]; then
		for tool_script in "${KOSAIO_DIR}/scripts/sdk/"*.sh; do
			tool_name=$(basename "${tool_script}" .sh)
			echo "	- ${tool_name}"
		done
	else
		kosaio_echo "Warning: Folder ${KOSAIO_DIR}/scripts/sdk/ doest exist, check kosaio installation."
	fi

	echo
	echo "Available actions:"
	echo "	- info			-  Get more information and notes about the tool."
	echo "	- install		-  Installs the tool (clone, build and apply)."
	echo "	- uninstall		-  Uninstalls the tool."
	echo "	- clone			-  Clones the tool's repository (the install action do it automatically)."
	echo "	- build			-  Compile/Build the tool (the install action do it automatically)."
	echo "	- apply			-  Copy the files compiled to the corresponded folders if required (the install action do it automatically)."
	echo "	- update		-  Updates the tool from source (dont forget to build and apply after)."
	echo
	echo "Example:"
	echo "$ kosaio kos install"
	echo
	echo "KOSAIO tools:"
	echo "	- self-update: Update KOSAIO it self."
	echo "	- project: Project Manager"
	echo "		- create: Create a nue project with minimal files and settings."
	echo "	- doctor: Check and repairs basic stuff about Kosaio, git, Kallistios, etc..."
	echo "		- check_required_vars: Check if all vars from Kosaio and kallistios are set."
	echo "		- check_folder_permission: Check if all permissions folders from Kosaio and kallistios are set."
	echo "		- check_git_settings: Check git settings to avoid problems with self_update."
	echo "		- install_all_dependencies: If you have problem with some tool compilation, you can try this."
	echo
	echo "Example:"
	echo "$ kosaio doctor check_required_vars"
	echo "$ kosaio self-update"
	echo
	exit 1
}

# --- Main Logic ---
TOOL="$1"
ACTION="$2"
FOLDER="sdk"

# Handle special commands first
if [ "$1" = "self-update" ]; then
	kosaio_git_common_update "${KOSAIO_DIR}"
	kosaio_set_folder_permission "${KOSAIO_DIR}"
	kosaio_echo "KOSAIO UPDATED"
	exit 0
fi

if [[ "$1" = "doctor" || "$1" = "project" ]]; then
	FOLDER="tools"
fi

# Check for correct number of arguments
if [ "$#" -lt 2 ]; then
	show_usage
fi

TOOL_SCRIPT="${KOSAIO_DIR}/scripts/${FOLDER}/${TOOL}.sh"

# Validate tool
if [ ! -f "${TOOL_SCRIPT}" ]; then
	kosaio_echo "Error: Tool '${TOOL}' not found."
	echo "Script '${TOOL_SCRIPT}' does not exist."
	show_usage
fi

# Source the tool's script to make its functions available in the current shell
# This is safe because the scripts only contain function definitions and don't execute code at the top level.
source "${TOOL_SCRIPT}"

# Check if the function for the given action exists in the sourced script
if ! [ "$(type -t ${ACTION})" == "function" ]; then
	echo "Error: Action '${ACTION}' is not supported by the tool '${TOOL}'."
	echo "Function '${ACTION}' is not defined in '${TOOL_SCRIPT}'."
	exit 1
fi

# Execute the action
kosaio_echo "Executing: ${TOOL} ${ACTION}"

# This calls the function from the sourced script, passing any additional arguments
shift 2
"${ACTION}" "$@"
